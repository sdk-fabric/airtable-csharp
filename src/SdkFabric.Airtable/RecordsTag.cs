/**
 * RecordsTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */


using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using RestSharp;
using Sdkgen.Client;
using Sdkgen.Client.Exception;

namespace SdkFabric.;

public class RecordsTag : TagAbstract {
    public RecordsTag(RestClient httpClient, Parser parser): base(httpClient, parser)
    {
    }


    /**
     * List records in a table. Note that table names and table ids can be used interchangeably. We recommend using table IDs so you don&#039;t need to modify your API request when your table name changes.
     */
    public async Task<RecordCollection> GetAll(string baseId, string tableIdOrName, string timeZone, string userLocale, int pageSize, int maxRecords, string offset, string view, string sort, string filterByFormula, string cellFormat, string fields, bool returnFieldsByFieldId, string recordMetadata)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("baseId", baseId);
        pathParams.Add("tableIdOrName", tableIdOrName);

        Dictionary<string, object> queryParams = new();
        queryParams.Add("timeZone", timeZone);
        queryParams.Add("userLocale", userLocale);
        queryParams.Add("pageSize", pageSize);
        queryParams.Add("maxRecords", maxRecords);
        queryParams.Add("offset", offset);
        queryParams.Add("view", view);
        queryParams.Add("sort", sort);
        queryParams.Add("filterByFormula", filterByFormula);
        queryParams.Add("cellFormat", cellFormat);
        queryParams.Add("fields", fields);
        queryParams.Add("returnFieldsByFieldId", returnFieldsByFieldId);
        queryParams.Add("recordMetadata", recordMetadata);

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/v0/:baseId/:tableIdOrName", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return this.Parser.Parse<RecordCollection>(response.Content);
        }

        if (response.ErrorException != null)
        {
            throw new ClientException("An unknown error occurred: " + response.ErrorException.Message, response.ErrorException);
        }

        throw (int) response.StatusCode switch
        {
            _ => throw new UnknownStatusCodeException("The server returned an unknown status code"),
        };
    }

    /**
     * Retrieve a single record. Any &quot;empty&quot; fields (e.g. &quot;&quot;, [], or false) in the record will not be returned.
     */
    public async Task<Record> Get(string baseId, string tableIdOrName, string recordId)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("baseId", baseId);
        pathParams.Add("tableIdOrName", tableIdOrName);
        pathParams.Add("recordId", recordId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/v0/:baseId/:tableIdOrName/:recordId", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return this.Parser.Parse<Record>(response.Content);
        }

        if (response.ErrorException != null)
        {
            throw new ClientException("An unknown error occurred: " + response.ErrorException.Message, response.ErrorException);
        }

        throw (int) response.StatusCode switch
        {
            _ => throw new UnknownStatusCodeException("The server returned an unknown status code"),
        };
    }

    /**
     * Updates a single record. Table names and table ids can be used interchangeably. We recommend using table IDs so you don&#039;t need to modify your API request when your table name changes.
     */
    public async Task<Record> Replace(string baseId, string tableIdOrName, string recordId, Record payload)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("baseId", baseId);
        pathParams.Add("tableIdOrName", tableIdOrName);
        pathParams.Add("recordId", recordId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/v0/:baseId/:tableIdOrName/:recordId", pathParams), Method.Put);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return this.Parser.Parse<Record>(response.Content);
        }

        if (response.ErrorException != null)
        {
            throw new ClientException("An unknown error occurred: " + response.ErrorException.Message, response.ErrorException);
        }

        throw (int) response.StatusCode switch
        {
            _ => throw new UnknownStatusCodeException("The server returned an unknown status code"),
        };
    }

    /**
     * Updates up to 10 records, or upserts them when performUpsert is set.
     */
    public async Task<BulkUpdateResponse> ReplaceAll(string baseId, string tableIdOrName, BulkUpdateRequest payload)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("baseId", baseId);
        pathParams.Add("tableIdOrName", tableIdOrName);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/v0/:baseId/:tableIdOrName", pathParams), Method.Put);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return this.Parser.Parse<BulkUpdateResponse>(response.Content);
        }

        if (response.ErrorException != null)
        {
            throw new ClientException("An unknown error occurred: " + response.ErrorException.Message, response.ErrorException);
        }

        throw (int) response.StatusCode switch
        {
            _ => throw new UnknownStatusCodeException("The server returned an unknown status code"),
        };
    }

    /**
     * Updates a single record. Table names and table ids can be used interchangeably. We recommend using table IDs so you don&#039;t need to modify your API request when your table name changes.
     */
    public async Task<Record> Update(string baseId, string tableIdOrName, string recordId, Record payload)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("baseId", baseId);
        pathParams.Add("tableIdOrName", tableIdOrName);
        pathParams.Add("recordId", recordId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/v0/:baseId/:tableIdOrName/:recordId", pathParams), Method.Patch);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return this.Parser.Parse<Record>(response.Content);
        }

        if (response.ErrorException != null)
        {
            throw new ClientException("An unknown error occurred: " + response.ErrorException.Message, response.ErrorException);
        }

        throw (int) response.StatusCode switch
        {
            _ => throw new UnknownStatusCodeException("The server returned an unknown status code"),
        };
    }

    /**
     * Updates up to 10 records, or upserts them when performUpsert is set.
     */
    public async Task<BulkUpdateResponse> UpdateAll(string baseId, string tableIdOrName, BulkUpdateRequest payload)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("baseId", baseId);
        pathParams.Add("tableIdOrName", tableIdOrName);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/v0/:baseId/:tableIdOrName", pathParams), Method.Patch);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return this.Parser.Parse<BulkUpdateResponse>(response.Content);
        }

        if (response.ErrorException != null)
        {
            throw new ClientException("An unknown error occurred: " + response.ErrorException.Message, response.ErrorException);
        }

        throw (int) response.StatusCode switch
        {
            _ => throw new UnknownStatusCodeException("The server returned an unknown status code"),
        };
    }


}
